{"version":3,"sources":["components/DrawingPanel/index.js","components/HierarchyPanel/index.js","App.js","index.js"],"names":["Shape","props","shapeDetails","attributes","name","type","shapeStyles","left","x","top","y","color","border","borderRadius","setCommonStyles","id","prepareShape","Rectongle","height","width","className","style","HorizontalLine","length","VerticalLine","NormalLine","x1","y1","x2","y2","sum","diagonalLength","Math","abs","sqrt","angel","atan","PI","normalLineHolderStyles","transform","prepareNormal","DrawingPanel","shapes","map","shape","index","ShapeDetail","shapeName","onThisShapeAttributesChanged","onAttributesChanged","e","attributeName","target","attributeValue","value","shapeWithNewAttributes","renderedComponents","attribute","push","defaultValue","onChange","getAttributes","HierarchyPanel","onShapesUpdated","shapesDetailsRef","useRef","useState","shapesDetails","setShapeDetails","useEffect","onAShapeAttributeChanged","updatedShape","a","current","onClick","shapeId","Date","now","newHorizontalLine","newVerticalLine","newRectongle","newNormalLine","App","setShapes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69b08b20.chunk.js","sourcesContent":["import \"./index.css\";\n\nconst DrawingPanel = (props) => {\n    const shapes = props.shapes;\n\n    const getShapes = () => {\n        return shapes.map((shape, index) => {\n            return(<Shape shapeDetails={ shape } key={ index }/>);\n        });\n    };\n\n    return(\n        <div className=\"drawing-panel\" id=\"drawingPanel\">\n            {\n                getShapes()\n            }\n        </div>\n    )\n};\n\nconst Shape = (props) => {\n    const {\n        attributes, \n        name,\n        type,\n    } = props.shapeDetails;\n\n    const setCommonStyles = shapeStyles => {\n        const left = `${ attributes.x }px`;\n        const top = `${ attributes.y }px`;\n\n        const color = attributes.color;\n\n        shapeStyles.left = left;\n        shapeStyles.top = top;\n\n        shapeStyles.border = `1px solid ${ color }`;\n        shapeStyles.borderRadius = \"2px\";\n\n        return shapeStyles;\n    };\n\n    const prepareShape = () => {\n        let shapeStyles = {};\n\n        shapeStyles = setCommonStyles(shapeStyles);\n\n        return (\n            <>\n                {\n                    type === \"verticalLine\" && <VerticalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"horizontalLine\" && <HorizontalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"normalLine\" && <NormalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"rectongle\" && <Rectongle shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n            </>\n        );\n    };\n\n    return(\n        <>\n            {\n                prepareShape()\n            }\n        </>\n    )\n};\n\nconst Rectongle = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareRectangle = () => {\n        shapeStyles.height = `${ attributes.height }px`;\n        shapeStyles.width = `${ attributes.width }px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareRectangle()\n            }\n        </>\n    );\n};\n\nconst HorizontalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareHorizontalLine = () => {\n        shapeStyles.width = `${ attributes.length }px`;\n        shapeStyles.height = `0px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareHorizontalLine()\n            }\n        </>\n    );\n};\n\nconst VerticalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareVerticalLine = () => {\n        shapeStyles.width = `0px`;\n        shapeStyles.height = `${ attributes.length }px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareVerticalLine()\n            }\n        </>\n    );\n};\n\nconst NormalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareNormal = () => {\n        const { x1, y1, x2, y2 } = attributes;\n\n        const length = y1 - y2;\n        const width = x1 - x2;\n\n        const squreOfLength = length * length;\n        const squreOfWidth = width * width;\n\n        const sum = squreOfWidth + squreOfLength;\n\n        const diagonalLength = Math.abs(Math.sqrt(sum));\n\n        const angelInRadians = Math.atan(length / width);\n        const angelInDegree = (angelInRadians * 180) / Math.PI;\n        const angel = -angelInDegree;\n\n        shapeStyles.width = `0px`;\n        shapeStyles.height = `${ diagonalLength }px`;\n\n        const normalLineHolderStyles = {\n            transform: `rotate(${ angel }deg)`,\n            width: \"1px\",\n            height: \"1px\",\n        };\n\n        return(\n            <div style={ normalLineHolderStyles }>\n                <div className=\"shape\" style={ shapeStyles } id={ name }></div>\n            </div>\n        );\n    };\n\n    return(\n        <>\n            {\n                prepareNormal()\n            }\n        </>\n    );\n};\n\n\nexport default DrawingPanel;\n","import \"./index.css\";\n\nimport { useState, useRef, useEffect } from \"react\";\n\nconst HierarchyPanel = (props) => {\n    const onShapesUpdated = props.onShapesUpdated;\n\n    const shapesDetailsRef = useRef([]);\n    const [shapesDetails, setShapeDetails] = useState([]);\n\n    useEffect(() => onShapesUpdated(shapesDetails), [shapesDetails]);\n\n    const onAShapeAttributeChanged = async(updatedShape) => {\n        shapesDetailsRef.current.map(shape => {\n            if(updatedShape.name !== shape.name){\n                return shape;\n            }\n\n            for(let attribute in shape.attributes){\n                shape.attributes[attribute] = updatedShape.attributes[attribute];\n            }\n\n            return shape;\n        });\n\n        setShapeDetails([ ...shapesDetailsRef.current ]);\n    };\n\n    const getShapesDetails = () => {\n        return shapesDetailsRef.current.map((shapeDetails, index) => {\n            return <ShapeDetail key={ index } onAttributesChanged={ onAShapeAttributeChanged } name={ shapeDetails.name } type={ shapeDetails.type } attributes={ shapeDetails.attributes }/>\n        });\n    };\n\n    const createNormalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `normalLine${ shapeId }`;\n\n        const newNormalLine = {\n            name: shapeName,\n            type: \"normalLine\",\n            attributes: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 0,\n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newNormalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createHorizontalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `horizontalLine${ shapeId }`;\n\n        const newHorizontalLine = {\n            name: shapeName,\n            type: \"horizontalLine\",\n            attributes: {\n                x: 0,\n                y: 0,\n                length: 0, \n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newHorizontalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createVerticalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `verticalLine${ shapeId }`;\n\n        const newVerticalLine = {\n            name: shapeName,\n            type: \"verticalLine\",\n            attributes: {\n                x: 0,\n                y: 0,\n                length: 0, \n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newVerticalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createRectongle = () => {\n        const shapeId = Date.now();\n        const shapeName = `rectongle${ shapeId }`;\n\n        const newRectongle = {\n            name: shapeName,\n            type: \"rectongle\",\n            attributes: {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newRectongle ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    return(\n        <div className=\"hierarchy-panel\">\n            <div className=\"shapes-details-container\">\n                { getShapesDetails() }\n            </div>\n            <div className=\"buttons-container\">\n                <div className=\"button horizontal-line\" onClick={ createHorizontalLine }></div>\n                <div className=\"button vertical-line\" onClick={ createVerticalLine }></div>\n                <div className=\"button rectongle\" onClick={ createRectongle }></div>\n                <div className=\"button normal-line\" onClick={ createNormalLine }></div>\n            </div>\n        </div>\n    )\n};\n\nconst ShapeDetail = (props) => {\n    const shapeName = props.name;\n    const attributes = props.attributes;\n    const type = props.type;\n    const onThisShapeAttributesChanged = props.onAttributesChanged;\n\n    const onAttributesChanged = e => {\n        const attributeName = e.target.name;\n        const attributeValue = e.target.value;\n\n        const shapeWithNewAttributes = { \n            name: shapeName, \n            type: type, \n            attributes: { ...attributes },\n        };\n        shapeWithNewAttributes.attributes[attributeName] = attributeValue;\n\n        onThisShapeAttributesChanged(shapeWithNewAttributes);\n    };\n\n    const getAttributes = () => {\n        let renderedComponents = [];\n        for(let attribute in attributes){\n            renderedComponents.push(\n                <div className=\"attribute\" key= { renderedComponents.length }>\n                    <label>{ attribute }</label>\n                    <br></br>\n                    <input type=\"text\" name={ attribute } id={ shapeName } defaultValue={ attributes[attribute] } onChange={ onAttributesChanged }/>\n                </div>\n            );\n        }\n\n        return renderedComponents;\n    };\n\n    return(\n        <div className=\"shape-detail-container\" key={ shapeName }>\n            <div className=\"general-info-container\">\n                <p className=\"shape-name\">{ shapeName }</p>\n                <p className=\"shape-type\">{ type }</p>\n            </div>\n            <div className=\"attributes-container\">\n                { getAttributes() }\n            </div>\n        </div>\n    );\n};\n\n\nexport default HierarchyPanel;\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport DrawingPanel from \"./components/DrawingPanel/index\";\nimport HierarchyPanel from \"./components/HierarchyPanel/index\";\n\nconst App = () => {\n    const [shapes, setShapes] = useState([]);\n\n    const updateShapes = shapes => setShapes(shapes);\n\n    return(\n        <div className=\"panels-container\">\n            <HierarchyPanel onShapesUpdated={ updateShapes }></HierarchyPanel>\n            <DrawingPanel shapes={ shapes }></DrawingPanel>\n        </div>\n    )\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}