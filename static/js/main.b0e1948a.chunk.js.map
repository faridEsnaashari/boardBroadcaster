{"version":3,"sources":["components/DrawingPanel/index.js","components/HierarchyPanel/index.js","App.js","index.js"],"names":["Shape","props","shapeDetails","attributes","name","type","shapeStyles","color","border","borderRadius","setCommonStyles","id","prepareShape","Rectongle","left","x","top","y","height","width","className","style","prepareRectangle","Circle","centerX","radius","centerY","HorizontalLine","length","prepareHorizontalLine","VerticalLine","prepareVerticalLine","NormalLine","x1","y1","x2","y2","sum","diagonalLength","Math","sqrt","angleInDegree","atan2","PI","normalLineHolderStyles","transform","position","prepareNormal","DrawingPanel","shapes","map","shape","index","ShapeDetail","shapeName","onThisShapeAttributesChanged","onAttributesChanged","e","attributeName","target","attributeValue","value","shapeWithNewAttributes","renderedComponents","attribute","push","defaultValue","onChange","getAttributes","HierarchyPanel","onShapesUpdated","shapesDetailsRef","useRef","useState","shapesDetails","setShapeDetails","useEffect","onAShapeAttributeChanged","updatedShape","a","current","onClick","shapeId","Date","now","newHorizontalLine","newVerticalLine","newRectongle","newNormalLine","newCircle","App","setShapes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0e1948a.chunk.js","sourcesContent":["import \"./index.css\";\n\nconst DrawingPanel = (props) => {\n    const shapes = props.shapes;\n\n    const getShapes = () => {\n        return shapes.map((shape, index) => {\n            return(<Shape shapeDetails={ shape } key={ index }/>);\n        });\n    };\n\n    return(\n        <div className=\"drawing-panel\" id=\"drawingPanel\">\n            {\n                getShapes()\n            }\n        </div>\n    )\n};\n\nconst Shape = (props) => {\n    const {\n        attributes, \n        name,\n        type,\n    } = props.shapeDetails;\n\n    const setCommonStyles = shapeStyles => {\n\n        const color = attributes.color;\n\n\n        shapeStyles.border = `1px solid ${ color }`;\n        shapeStyles.borderRadius = \"2px\";\n\n        return shapeStyles;\n    };\n\n    const prepareShape = () => {\n        let shapeStyles = {};\n\n        shapeStyles = setCommonStyles(shapeStyles);\n\n        return (\n            <>\n                {\n                    type === \"verticalLine\" && <VerticalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"horizontalLine\" && <HorizontalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"normalLine\" && <NormalLine shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"rectongle\" && <Rectongle shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n                {\n                    type === \"circle\" && <Circle shapeStyles={ shapeStyles } id={ name } attributes={ attributes }/>\n                }\n            </>\n        );\n    };\n\n    return(\n        <>\n            {\n                prepareShape()\n            }\n        </>\n    )\n};\n\nconst Rectongle = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareRectangle = () => {\n        const left = `${ attributes.x }px`;\n        const top = `${ attributes.y }px`;\n\n        shapeStyles.left = left;\n        shapeStyles.top = top;\n\n        shapeStyles.height = `${ attributes.height }px`;\n        shapeStyles.width = `${ attributes.width }px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareRectangle()\n            }\n        </>\n    );\n};\n\nconst Circle = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareRectangle = () => {\n        const left = `${ attributes.centerX - attributes.radius }px`;\n        const top = `${ attributes.centerY - attributes.radius }px`;\n\n        shapeStyles.left = left;\n        shapeStyles.top = top;\n\n        shapeStyles.height = `${ attributes.radius * 2 }px`;\n        shapeStyles.width = `${ attributes.radius * 2 }px`;\n\n        shapeStyles.borderRadius = \"100px\";\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareRectangle()\n            }\n        </>\n    );\n};\n\nconst HorizontalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareHorizontalLine = () => {\n        const left = `${ attributes.x }px`;\n        const top = `${ attributes.y }px`;\n\n        shapeStyles.left = left;\n        shapeStyles.top = top;\n\n        shapeStyles.width = `${ attributes.length }px`;\n        shapeStyles.height = `0px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareHorizontalLine()\n            }\n        </>\n    );\n};\n\nconst VerticalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareVerticalLine = () => {\n        const left = `${ attributes.x }px`;\n        const top = `${ attributes.y }px`;\n\n        shapeStyles.left = left;\n        shapeStyles.top = top;\n\n        shapeStyles.width = `0px`;\n        shapeStyles.height = `${ attributes.length }px`;\n\n        return(<div className=\"shape\" style={ shapeStyles } id={ name }></div>);\n    };\n\n    return(\n        <>\n            {\n                prepareVerticalLine()\n            }\n        </>\n    );\n};\n\nconst NormalLine = (props) => {\n    const { shapeStyles, name, attributes } = props;\n\n    const prepareNormal = () => {\n        const { x1, y1, x2, y2 } = attributes;\n\n        const length = y2 - y1;\n        const width = x2 - x1;\n\n        const squreOfLength = length * length;\n        const squreOfWidth = width * width;\n\n        const sum = squreOfWidth + squreOfLength;\n\n        const diagonalLength = Math.sqrt(sum);\n\n        const angleInRadians = Math.atan2(y2 - y1, x2 - x1);\n        const angleInDegree = angleInRadians * 180 / Math.PI;\n\n        shapeStyles.width = `${ diagonalLength }px`;\n        shapeStyles.height = `0px`;\n\n        const left = `${ attributes.x1 }px`;\n        const top = `${ attributes.y1 }px`;\n\n        const normalLineHolderStyles = {\n            transform: `rotate(${ angleInDegree }deg)`,\n            width: \"1px\",\n            height: \"1px\",\n            position: \"absolute\",\n            top: top,\n            left: left,\n        };\n\n        return(\n            <div style={ normalLineHolderStyles }>\n                <div className=\"shape\" style={ shapeStyles } id={ name }></div>\n            </div>\n        );\n    };\n\n    return(\n        <>\n            {\n                prepareNormal()\n            }\n        </>\n    );\n};\n\n\nexport default DrawingPanel;\n","import \"./index.css\";\n\nimport { useState, useRef, useEffect } from \"react\";\n\nconst HierarchyPanel = (props) => {\n    const onShapesUpdated = props.onShapesUpdated;\n\n    const shapesDetailsRef = useRef([]);\n    const [shapesDetails, setShapeDetails] = useState([]);\n\n    useEffect(() => onShapesUpdated(shapesDetails), [shapesDetails]);\n\n    const onAShapeAttributeChanged = async(updatedShape) => {\n        shapesDetailsRef.current.map(shape => {\n            if(updatedShape.name !== shape.name){\n                return shape;\n            }\n\n            for(let attribute in shape.attributes){\n                shape.attributes[attribute] = updatedShape.attributes[attribute];\n            }\n\n            return shape;\n        });\n\n        setShapeDetails([ ...shapesDetailsRef.current ]);\n    };\n\n    const getShapesDetails = () => {\n        return shapesDetailsRef.current.map((shapeDetails, index) => {\n            return <ShapeDetail key={ index } onAttributesChanged={ onAShapeAttributeChanged } name={ shapeDetails.name } type={ shapeDetails.type } attributes={ shapeDetails.attributes }/>\n        });\n    };\n\n    const createCircle = () => {\n        const shapeId = Date.now();\n        const shapeName = `circle${ shapeId }`;\n\n        const newCircle = {\n            name: shapeName,\n            type: \"circle\",\n            attributes: {\n                centerX: 0,\n                centerY: 0,\n                radius: 0,\n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newCircle ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createNormalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `normalLine${ shapeId }`;\n\n        const newNormalLine = {\n            name: shapeName,\n            type: \"normalLine\",\n            attributes: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 0,\n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newNormalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createHorizontalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `horizontalLine${ shapeId }`;\n\n        const newHorizontalLine = {\n            name: shapeName,\n            type: \"horizontalLine\",\n            attributes: {\n                x: 0,\n                y: 0,\n                length: 0, \n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newHorizontalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createVerticalLine = () => {\n        const shapeId = Date.now();\n        const shapeName = `verticalLine${ shapeId }`;\n\n        const newVerticalLine = {\n            name: shapeName,\n            type: \"verticalLine\",\n            attributes: {\n                x: 0,\n                y: 0,\n                length: 0, \n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newVerticalLine ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    const createRectongle = () => {\n        const shapeId = Date.now();\n        const shapeName = `rectongle${ shapeId }`;\n\n        const newRectongle = {\n            name: shapeName,\n            type: \"rectongle\",\n            attributes: {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n                color: \"#000000\",\n            },\n        };\n\n        shapesDetailsRef.current = [ ...shapesDetailsRef.current, newRectongle ];\n        setShapeDetails(shapesDetailsRef.current);\n    }\n\n    return(\n        <div className=\"hierarchy-panel\">\n            <div className=\"shapes-details-container\">\n                { getShapesDetails() }\n            </div>\n            <div className=\"buttons-container\">\n                <div className=\"button horizontal-line\" onClick={ createHorizontalLine }></div>\n                <div className=\"button vertical-line\" onClick={ createVerticalLine }></div>\n                <div className=\"button rectongle\" onClick={ createRectongle }></div>\n                <div className=\"button normal-line\" onClick={ createNormalLine }></div>\n                <div className=\"button circle\" onClick={ createCircle }></div>\n            </div>\n        </div>\n    )\n};\n\nconst ShapeDetail = (props) => {\n    const shapeName = props.name;\n    const attributes = props.attributes;\n    const type = props.type;\n    const onThisShapeAttributesChanged = props.onAttributesChanged;\n\n    const onAttributesChanged = e => {\n        const attributeName = e.target.name;\n        const attributeValue = e.target.value;\n\n        const shapeWithNewAttributes = { \n            name: shapeName, \n            type: type, \n            attributes: { ...attributes },\n        };\n        shapeWithNewAttributes.attributes[attributeName] = attributeValue;\n\n        onThisShapeAttributesChanged(shapeWithNewAttributes);\n    };\n\n    const getAttributes = () => {\n        let renderedComponents = [];\n        for(let attribute in attributes){\n            renderedComponents.push(\n                <div className=\"attribute\" key= { renderedComponents.length }>\n                    <label>{ attribute }</label>\n                    <br></br>\n                    <input type=\"text\" name={ attribute } id={ shapeName } defaultValue={ attributes[attribute] } onChange={ onAttributesChanged }/>\n                </div>\n            );\n        }\n\n        return renderedComponents;\n    };\n\n    return(\n        <div className=\"shape-detail-container\" key={ shapeName }>\n            <div className=\"general-info-container\">\n                <p className=\"shape-name\">{ shapeName }</p>\n                <p className=\"shape-type\">{ type }</p>\n            </div>\n            <div className=\"attributes-container\">\n                { getAttributes() }\n            </div>\n        </div>\n    );\n};\n\n\nexport default HierarchyPanel;\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport DrawingPanel from \"./components/DrawingPanel/index\";\nimport HierarchyPanel from \"./components/HierarchyPanel/index\";\n\nconst App = () => {\n    const [shapes, setShapes] = useState([]);\n\n    const updateShapes = shapes => setShapes(shapes);\n\n    return(\n        <div className=\"panels-container\">\n            <HierarchyPanel onShapesUpdated={ updateShapes }></HierarchyPanel>\n            <DrawingPanel shapes={ shapes }></DrawingPanel>\n        </div>\n    )\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}